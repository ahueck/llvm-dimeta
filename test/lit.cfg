import os
import lit.util
import lit.formats

# From libcxx lit: Tell pylint that we know config and lit_config exist somewhere.
if 'PYLINT_IMPORT' in os.environ:
    config = object()
    lit_config = object()

config.name = "dimetaTest"

loaded_site_cfg = getattr(config, 'loaded_site_config', False)
if not loaded_site_cfg:
  site_cfg = lit_config.params.get('dimeta_site_config', None)
  if site_cfg and os.path.exists(site_cfg):
    lit_config.load_config(config, site_cfg)
    raise SystemExit

config.test_format = lit.formats.ShTest(execute_external=True)
config.suffixes = ['.c','.cpp']
config.excludes = ['Inputs', 'verifier']

dimeta_lib_dir    = getattr(config, 'dimeta_lib_dir', None)
dimeta_pass_dir   = getattr(config, 'dimeta_pass_dir', None)
dimeta_test_pass_dir   = getattr(config, 'dimeta_test_pass_dir', None)
dimeta_pass_name  = getattr(config, 'dimeta_pass', None)
dimeta_test_pass_name  = getattr(config, 'dimeta_test_pass', None)
dimeta_runtime_dir= getattr(config, 'dimeta_runtime_dir', None)
dimeta_script_dir = getattr(config, 'dimeta_script_dir', None)

dimeta_std_args = 'dimeta'
dimeta_test_std_args = 'dimeta-test'
dimeta_pass     = '{}/{}'.format(dimeta_pass_dir, dimeta_pass_name)
dimeta_test_pass     = '{}/{}'.format(dimeta_test_pass_dir, dimeta_test_pass_name)
to_llvm_args    = '-O1 -g -Xclang -disable-llvm-passes -S -emit-llvm -o -'

clang_cpp   = getattr(config, 'clang_cpp', "clang++")
clang_cc    = getattr(config, 'clang', "clang")
llc         = getattr(config, 'llc', "llc")
filecheck   = getattr(config, 'filecheck', "FileCheck")
if config.opt_args:
  opt = '{} {}'.format(getattr(config, 'opt', "opt") , config.opt_args)
else:
  opt = '{}'.format(getattr(config, 'opt', "opt"))

if config.heapallocsite:
    config.available_features.add('heapallocsite')
else:
    config.available_features.add('heapmanual')

if config.llvm_version < 14:
  config.available_features.add('legacyllvm')

#config.available_features.add('local')

config.substitutions.append(('%clang-cpp', clang_cpp))
config.substitutions.append(('%clang-cc', clang_cc))
config.substitutions.append(('%opt', opt))
config.substitutions.append(('%filecheck', filecheck))

config.substitutions.append(('%lib_dir', dimeta_lib_dir))
config.substitutions.append(('%pass_dir', dimeta_pass_dir))
if dimeta_runtime_dir is not None:
  config.substitutions.append(('%runtime_dir', dimeta_runtime_dir))

config.substitutions.append(('%pass_name', dimeta_pass_name))
config.substitutions.append(('%pass_plugin', dimeta_pass))

config.substitutions.append(('%arg_std', dimeta_std_args))

if config.llvm_version <= 13:
  config.substitutions.append(('%apply-dimeta', '{} -load {} -{}'.format(opt, dimeta_pass, dimeta_std_args)))
  config.substitutions.append(('%apply-verifier', '{} -load {} -{}'.format(opt, dimeta_test_pass, dimeta_test_std_args)))
else:
  # FIXME: -load for cmd line parsing
  config.substitutions.append(('%apply-dimeta', '{} -load-pass-plugin {} -passes={}'.format(opt,dimeta_pass, dimeta_std_args)))
  config.substitutions.append(('%apply-verifier', '{} -load-pass-plugin {} -passes={}'.format(opt, dimeta_test_pass, dimeta_test_std_args)))

config.substitutions.append(('%c-to-llvm', '{} {}'.format(clang_cc, to_llvm_args)))
config.substitutions.append(('%cpp-to-llvm', '{} {}'.format(clang_cpp, to_llvm_args)))

if dimeta_script_dir is not None:
  config.substitutions.append(('%script_dir', dimeta_script_dir))
  config.substitutions.append(('%run', '{}/run.sh'.format(dimeta_script_dir)))
  config.substitutions.append(('%apply', '{}/apply.sh'.format(dimeta_script_dir)))
